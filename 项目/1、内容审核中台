1、背景
原因：
1.1、通常接入一个垂类成本在20天左右 ，成本比较高，经常重复造轮子（轮子：相同策略的重复封装调用等）
1.2、业务流程复杂，机审策略都是串行操作，整体耗时长

2、目标
足够通用，易于接入，灵活扩展，省时省力

3、简单设计思路
通盘考虑所有的审核业务都会有机审审核和人工审核，再基于审核业务特点：抽象出了机审、人审、控制三个服务，机审和人审用于承载审核业务，流控用于驱动数据流转。机审和人审还配有钩子来支持个性化的需求，三个服务均为通过配置方式进行管理的。
3.1、流控：
1、资源接入，通知上下游
2、流量控制
3、划分审核流和业务线，根据配置文件去扭转
4、流程驱动扭转
3.2、机审：
执行机审策略，过滤文章，产出辅助信息（人审）
1、策略分组，组内并行，组间串行
2、策略封装一次，通过配置定义到审核流当中，
3、提供策略的前置钩子和后置钩子。以及审核流统一的后置钩子来个性化处理
3.3、人审：
1、入审个性化钩子，确定分区以及权重
2、审核的时候，任务分配机制


可以突出的思路：
1、钩子的设计
call_user_func_array 审核流+参数
抽象函数：

2、分配任务：1、一篇文章不能被分配给多人 2、支持权重以及单/多篇审核
小数量方案：获取db权重高的10篇，然后数据库进行加锁，但是此时存在问题，主从同步问题 incr
大数量方案：redis zset zrange zrem lua脚本保证原子性，然后进行数据库加锁

3、流量控制
incr(审核流+时间戳);
考虑令牌桶：

其他思考：
任务配置中心
特点：
1、配置的增删改查
2、不同环境配置隔离（开发、测试、预发布、灰度/线上）
3、高性能、高可用性
4、请求量多、高并发
5、读多写少
设计参考资料：https://blog.csdn.net/m0_37814487/article/details/80276513



